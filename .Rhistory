# called `national`
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv
national <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv", stringsAsFactors = FALSE)
View(national)
# 2.a How many total COVID cases have there been in the U.S. by the most recent
# date in the dataset? Make sure to pull() this number `total_us_cases`
total_us_cases <- national %>% filter(date = max(date))
# 2.a How many total COVID cases have there been in the U.S. by the most recent
# date in the dataset? Make sure to pull() this number `total_us_cases`
total_us_cases <- national %>% filter(date == max(date))
total_us_cases
# 2.b How many total COVID-related deaths have there been in the U.S. by the
# most recent date in the dataset? Make sure to pull() this number
# `total_us_deaths`
total_us_deaths <- national %>% filter(date == max(date))
total_us_deaths
# 2.a How many total COVID cases have there been in the U.S. by the most recent
# date in the dataset? Make sure to pull() this number `total_us_cases`
total_us_cases <- national %>% filter(date == max(date)) %>% pull(cases)
# 2.b How many total COVID-related deaths have there been in the U.S. by the
# most recent date in the dataset? Make sure to pull() this number
# `total_us_deaths`
total_us_deaths <- national %>% filter(date == max(date)) %>% pull(deaths)
# 2.c Which state has had the highest number of COVID cases? Make sure to pull()
# this value `state_highest_cases`
state_highest_cases <- states %>% filter (cases == max(cases)) %>% pull(cases)
# 2.c Which state has had the highest number of COVID cases? Make sure to pull()
# this value `state_highest_cases`
state_highest_cases <- states %>% filter (cases == max(cases)) %>% pull(cases)
# 2.b How many total COVID-related deaths have there been in the U.S. by the
# most recent date in the dataset? Make sure to pull() this number
# `total_us_deaths`
total_us_deaths <- national %>% filter(date == max(date)) %>% pull(states)
# 2.b How many total COVID-related deaths have there been in the U.S. by the
# most recent date in the dataset? Make sure to pull() this number
# `total_us_deaths`
total_us_deaths <- national %>% filter(date == max(date)) %>% pull(state)
# 2.b How many total COVID-related deaths have there been in the U.S. by the
# most recent date in the dataset? Make sure to pull() this number
# `total_us_deaths`
total_us_deaths <- national %>% filter(date == max(date)) %>% pull(deaths)
# 2.c Which state has had the highest number of COVID cases? Make sure to pull()
# this value `state_highest_cases`
state_highest_cases <- states %>% filter (cases == max(cases)) %>% pull(state)
# 2.d What is the highest number of cases in a state? Make sure to pull() this
# number `num_highest_state`
num_highest_state <- states %>% filter (cases == max(cases) %>% pull (cases)
# 2.d What is the highest number of cases in a state? Make sure to pull() this
# number `num_highest_state`
num_highest_state <- states %>% filter (cases == max(cases) %>% pull (cases)
# 2.d What is the highest number of cases in a state? Make sure to pull() this
# number `num_highest_state`
num_highest_state <- states %>% filter (cases == max(cases)) %>% pull (cases)
# 2.d What is the highest number of cases in a state? Make sure to pull() this
# number `num_highest_state`
num_highest_state <- states %>% filter (cases == max(cases)) %>% pull (cases)
# 2.e Which state has the highest ratio of deaths to cases (deaths/cases), as of
# the most recent date? Make sure to pull() this value
# HINT: You may need to create a new column in order to do this:
# `state_highest_ratio`
state_highest_ratio <- states %>% filter (cases == max(cases)) %>%
mutate(ratio = deaths/cases) %>%
pull(ratio)
# 2.e Which state has the highest ratio of deaths to cases (deaths/cases), as of
# the most recent date? Make sure to pull() this value
# HINT: You may need to create a new column in order to do this:
# `state_highest_ratio`
state_highest_ratio <- states %>% filter (dates == max(dates)) %>%
mutate(ratio = deaths/cases) %>%
pull(state)
# 2.e Which state has the highest ratio of deaths to cases (deaths/cases), as of
# the most recent date? Make sure to pull() this value
# HINT: You may need to create a new column in order to do this:
# `state_highest_ratio`
state_highest_ratio <- states %>% filter (dates == max(dates)) %>%
mutate(ratio = deaths/cases) %>%
pull(state)
# 2.e Which state has the highest ratio of deaths to cases (deaths/cases), as of
# the most recent date? Make sure to pull() this value
# HINT: You may need to create a new column in order to do this:
# `state_highest_ratio`
state_highest_ratio <- states %>% filter (date == max(date)) %>%
mutate(ratio = deaths/cases) %>%
pull(state)
# 2.f Which state has had the fewest number of cases as of the most
# recent date? Make sure to pull() this value `state_lowest_cases`
state_lowest_cases <- states %>% filter (cases == max(cases)) %>% pull (cases)
# 2.f Which state has had the fewest number of cases as of the most
# recent date? Make sure to pull() this value `state_lowest_cases`
state_lowest_cases <- states %>% filter (date == max(date)) %>%
filter (cases == min(cases))
# 2.e Which state has the highest ratio of deaths to cases (deaths/cases), as of
# the most recent date? Make sure to pull() this value
# HINT: You may need to create a new column in order to do this:
# `state_highest_ratio`
state_highest_ratio <- states %>% filter (date == max(date)) %>%
mutate(ratio = deaths/cases) %>%
filter (ratio == max(ratio))
pull(state)
pull(states)
# 2.e Which state has the highest ratio of deaths to cases (deaths/cases), as of
# the most recent date? Make sure to pull() this value
# HINT: You may need to create a new column in order to do this:
# `state_highest_ratio`
state_highest_ratio <- states %>% filter (date == max(date)) %>%
mutate(ratio = deaths/cases) %>%
filter (ratio == max(ratio)) %>%
pull(states)
# 2.e Which state has the highest ratio of deaths to cases (deaths/cases), as of
# the most recent date? Make sure to pull() this value
# HINT: You may need to create a new column in order to do this:
# `state_highest_ratio`
state_highest_ratio <- states %>% filter (date == max(date)) %>%
mutate(ratio = deaths/cases) %>%
filter (ratio == max(ratio)) %>%
pull(states)
View(states)
# 2.e Which state has the highest ratio of deaths to cases (deaths/cases), as of
# the most recent date? Make sure to pull() this value
# HINT: You may need to create a new column in order to do this:
# `state_highest_ratio`
state_highest_ratio <- states %>% filter (date == max(date)) %>%
mutate(ratio = deaths/cases) %>%
filter (ratio == max(ratio)) %>%
pull(state)
# 2.f Which state has had the fewest number of cases as of the most
# recent date? Make sure to pull() this value `state_lowest_cases`
state_lowest_cases <- states %>% filter (date == max(date)) %>%
filter (cases == min(cases)) %>%
pull(state)
# 2.g What is the highest number of cases that have happened in a single county?
# Make sure to pull() this NUMBER `num_highest_cases_county`
num_highest_cases_county <- county %>% filter (cases == max(cases)) %>% pull(county)
# 2.g What is the highest number of cases that have happened in a single county?
# Make sure to pull() this NUMBER `num_highest_cases_county`
num_highest_cases_county <- counties %>% filter (cases == max(cases)) %>% pull(counties)
# 2.g What is the highest number of cases that have happened in a single county?
# Make sure to pull() this NUMBER `num_highest_cases_county`
num_highest_cases_county <- counties %>% filter (cases == max(cases)) %>% pull(county)
# 2.g What is the highest number of cases that have happened in a single county?
# Make sure to pull() this NUMBER `num_highest_cases_county`
num_highest_cases_county <- counties %>% filter (cases == max(cases)) %>% pull(county)
# 2.g What is the highest number of cases that have happened in a single county?
# Make sure to pull() this NUMBER `num_highest_cases_county`
num_highest_cases_county <- counties %>% filter (cases == max(cases)) %>% pull(countie)
View(counties)
# 2.g What is the highest number of cases that have happened in a single county?
# Make sure to pull() this NUMBER `num_highest_cases_county`
num_highest_cases_county <- counties %>% filter (cases == max(cases)) %>% pull(county)
# 2.g What is the highest number of cases that have happened in a single county?
# Make sure to pull() this NUMBER `num_highest_cases_county`
num_highest_cases_county <- counties %>% filter (cases == max(cases)) %>% pull(cases)
# 2.h Which county had this highest number of cases? Make sure to pull() this
# COUNTY `county_highest_cases`
county_highest_cases <- counties %>% filter (cases == max(cases)) %>% pull(county)
# 2.i Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together, in
# this form: "COUNTY, STATE".
# Therefore, add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
location <- counties %>% mutate(location = paste0(county, ",", state))
# 2.j What is the name of the location (county, state) with the highest number
# of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% filter(deaths == max(deaths)) %>% pull(location)
# 1.a Load the tidyverse package and the dplyr package
library(tidyverse)
library(dplyr)
# 2.i Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together, in
# this form: "COUNTY, STATE".
# Therefore, add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
location <- counties %>% mutate(location = paste0(county, ",", state))
# 2.j What is the name of the location (county, state) with the highest number
# of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% filter(deaths == max(deaths)) %>% pull(location)
# 1.a Load the tidyverse package and the dplyr package
install.packages("tidyverse")
# 1.a Load the tidyverse package and the dplyr package
install.packages("tidyverse")
library("dplyr")
# 2.j What is the name of the location (county, state) with the highest number
# of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% filter(deaths == max(deaths)) %>% pull(location)
# 1.a Load the tidyverse package and the dplyr package
install.packages("tidyverse")
library("tidyverse")
library("dplyr")
# 1.b Load the *national level* data from the following URL into a variable
# called `national`
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv
national <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv", stringsAsFactors = FALSE)
# 1.c Load the *state level* data from the following URL into a variable called
# `states`
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv
states <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv", stringsAsFactors = FALSE)
# 1.d Load the *county level* data from the following URL into a variable called
# `counties`
# NOTE: This is a large dataset. It may take 30-60 seconds to load.
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-counties-covid-2023.csv
counties <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-counties-covid-2023.csv")
# 1.e How many observations (rows) are in each dataset?
# Create `obs_national`, `obs_states`, `obs_counties`
obs_national <- nrow(national)
obs_states <- nrow(states)
obs_counties <- nrow(counties)
# 1.f How many features (columns) are there in each dataset?
# Create `num_features_national`, `num_features_states`, `num_features_counties`
num_features_national <- ncol(national)
num_features_states <- ncol(states)
num_features_counties <- ncol(counties)
# 2.a How many total COVID cases have there been in the U.S. by the most recent
# date in the dataset? Make sure to pull() this number `total_us_cases`
total_us_cases <- national %>% filter(date == max(date)) %>% pull(cases)
# 2.b How many total COVID-related deaths have there been in the U.S. by the
# most recent date in the dataset? Make sure to pull() this number
# `total_us_deaths`
total_us_deaths <- national %>% filter(date == max(date)) %>% pull(deaths)
# 2.c Which state has had the highest number of COVID cases? Make sure to pull()
# this value `state_highest_cases`
state_highest_cases <- states %>% filter (cases == max(cases)) %>% pull(state)
# 2.d What is the highest number of cases in a state? Make sure to pull() this
# number `num_highest_state`
num_highest_state <- states %>% filter (cases == max(cases)) %>% pull (cases)
# 2.e Which state has the highest ratio of deaths to cases (deaths/cases), as of
# the most recent date? Make sure to pull() this value
# HINT: You may need to create a new column in order to do this:
# `state_highest_ratio`
state_highest_ratio <- states %>% filter (date == max(date)) %>%
mutate(ratio = deaths/cases) %>%
filter (ratio == max(ratio)) %>%
pull(state)
# 2.f Which state has had the fewest number of cases as of the most
# recent date? Make sure to pull() this value `state_lowest_cases`
state_lowest_cases <- states %>% filter (date == max(date)) %>%
filter (cases == min(cases)) %>%
pull(state)
# 2.g What is the highest number of cases that have happened in a single county?
# Make sure to pull() this NUMBER `num_highest_cases_county`
num_highest_cases_county <- counties %>% filter (cases == max(cases)) %>% pull(cases)
# 2.h Which county had this highest number of cases? Make sure to pull() this
# COUNTY `county_highest_cases`
county_highest_cases <- counties %>% filter (cases == max(cases)) %>% pull(county)
# 2.i Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together, in
# this form: "COUNTY, STATE".
# Therefore, add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
counties <- counties %>% mutate(location = paste0(county, ",", state))
# 2.j What is the name of the location (county, state) with the highest number
# of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% filter(deaths == max(deaths, na.rm = TRUE)) %>% pull(location)
# 2.k Add a new column to your `national` data frame called `new_cases` — that
# is, the number new cases each day.
# HINT: The dyplr lag() function will be very helpful here.
national <- national %>% mutate(new_cases = cases - lag(cases))
# 2.l Similarly, the `deaths` columns is *not* the number of new deaths per day.
# Add  a new column to the `national` data frame called `new_deaths` that has
# the number of *new* deaths each day.
# HINT: The dyplr lag() function will be very helpful here.
national <- national %>% mutate(new_deaths = deaths - lag(deaths))
date_most_cases <- national %>% filter(new_cases == max(new_cases, na.rm = TRUE)) %>% pull(date)
# 2.n What was the date when the most new deaths in the U.S. occurred? Make sure
# to pull() this value `date_most_deaths`
date_most_deaths <- national %>% filter(new_deaths == max(new_deaths, na.rm = TRUE)) %>% pull(date)
# 2.o How many people died on the date when the most deaths occurred? Make sure
# to pull() this value `
most_deaths <- national %>% filter(new_deaths == max(new_deaths, na.rm = TRUE)) %>% pull(new_deaths)
# You can plot this data with built-in plot functions
plot(national$new_cases)
plot(national$new_deaths)
# 3.a For each state, what is the county with the highest number of COVID cases?
# Make a dataframe that has every state and the county with the highest number
# of cases and corresponding rows (hint: you will need to use a grouping
# operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == max(cases)) %>%
filter(date == max(date))
# 3.b For each state, what is the county with the lowest number of COVID-related
# deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of
# deaths and corresponding rows (hint: you will need to use a grouping operation
# and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_in_each_state <- counties %>%
group_by(state) %>%
filter(deaths == min(deaths)) %>%
filter(date == max(date))
# 4.a Create a `total_cases_counties` dataframe that adds up all the COIVD cases
# for all the counties for every date in the counties dataframe.
# You should name the columns `date` and `county_total_cases`.
total_cases_counties <- counties %>%
group_by(date) %>%
summarize(total_county_cases = sum(cases))
# 4.b Join `total_cases_counties` with the `national` dataframe.
# Save this dataframe as `all_totals`.
all_totals <-
# 4.c Filter the all_totals dataframe to find only the rows where the
# "county_total_cases" column does not match the "cases" column
# Save as national_county_diff
national_county_diff <- NULL
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- NULL
# 5. You Turn!
-------------------------------------------------
# 5.a Now it's your turn to ask your own question! Come up with a new question
# about this COVID data, and then write code to answer it (at least 2-3 lines)
# QUESTION:  Write your question in English language words here
#
#
#  Write code (at least 2-3 lines) that will answer your question
my_answer <- NULL
# 2.c Which state has had the highest number of COVID cases? Make sure to pull()
# this value `state_highest_cases`
state_highest_cases <- states %>% filter (cases == max(cases)) %>% pull(state)
# 2.o How many people died on the date when the most deaths occurred? Make sure
# to pull() this value `
most_deaths <- national %>% filter(new_deaths == max(new_deaths, na.rm = TRUE)) %>% pull(new_deaths)
# 3.a For each state, what is the county with the highest number of COVID cases?
# Make a dataframe that has every state and the county with the highest number
# of cases and corresponding rows (hint: you will need to use a grouping
# operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == max(cases)) %>%
filter(date == max(date))
# 2.i Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together, in
# this form: "COUNTY, STATE".
# Therefore, add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
counties <- counties %>% mutate(location = paste0(county, ","," ", state))
# 3.a For each state, what is the county with the highest number of COVID cases?
# Make a dataframe that has every state and the county with the highest number
# of cases and corresponding rows (hint: you will need to use a grouping
# operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == max(cases)) %>%
filter(date == max(date))
# 3.b For each state, what is the county with the lowest number of COVID-related
# deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of
# deaths and corresponding rows (hint: you will need to use a grouping operation
# and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_in_each_state <- counties %>%
group_by(state) %>%
filter(date == max(date)) %>%
filter(deaths == min(deaths))
# 4.c Filter the all_totals dataframe to find only the rows where the
# "county_total_cases" column does not match the "cases" column
# Save as national_county_diff
national_county_diff <- all_totals %>%
filter(county_total_cases != cases) %>%
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national)
# 4.c Filter the all_totals dataframe to find only the rows where the
# "county_total_cases" column does not match the "cases" column
# Save as national_county_diff
national_county_diff <- all_totals %>%
filter(county_total_cases != cases) %>%
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national)
lowest_cases_state_2021
# 4.c Filter the all_totals dataframe to find only the rows where the
# "county_total_cases" column does not match the "cases" column
# Save as national_county_diff
national_county_diff <- all_totals %>%
filter(county_total_cases != cases) %>%
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national)
my_answer
# 4.c Filter the all_totals dataframe to find only the rows where the
# "county_total_cases" column does not match the "cases" column
# Save as national_county_diff
national_county_diff <- all_totals %>%
filter(county_total_cases != cases) %>%
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national)
summarize(total_cases = sum(cases)) %>%
my_answer
# 4.c Filter the all_totals dataframe to find only the rows where the
# "county_total_cases" column does not match the "cases" column
# Save as national_county_diff
national_county_diff <- all_totals %>%
filter(county_total_cases != cases) %>%
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national)
# 4.c Filter the all_totals dataframe to find only the rows where the
# "county_total_cases" column does not match the "cases" column
# Save as national_county_diff
national_county_diff <- all_totals %>%
filter(county_total_cases != cases) %>%
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national)
summarize(total_cases = sum(cases)) %>%
View(my_answer)
View(total_cases_counties)
View(states)
# 4.c Filter the all_totals dataframe to find only the rows where the
# "county_total_cases" column does not match the "cases" column
# Save as national_county_diff
national_county_diff <- all_totals %>%
filter(county_total_cases != cases) %>%
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national)
my_answer <- states %>%
filter(year(date) == 2021) %>%
group_by(state) %>%
summarize(total_deaths = sum(deaths)) %>%
filter(total_deaths == max(total_deaths))
View(my_answer)
# 4.a Create a `total_cases_counties` dataframe that adds up all the COIVD cases
# for all the counties for every date in the counties dataframe.
# You should name the columns `date` and `county_total_cases`.
total_cases_counties <- counties %>%
group_by(date) %>%
summarize(total_county_cases = sum(cases))
# 4.b Join `total_cases_counties` with the `national` dataframe.
# Save this dataframe as `all_totals`.
all_totals <- left_join(total_cases_counties, national)
# 4.c Filter the all_totals dataframe to find only the rows where the
# "county_total_cases" column does not match the "cases" column
# Save as national_county_diff
national_county_diff <- all_totals %>%
filter(county_total_cases != cases) %>%
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national)
co2_df <- read.csv("https://raw.githubusercontent.com/owid/co2-data/master/owid-co2-data.csv")
View(co2_df)
shiny::runApp('C:/Users/ethan/Documents/info201/a4-climate-change-eggsocrispy')
data <- read.csv("https://raw.githubusercontent.com/owid/co2-data/master/owid-co2-data.csv")
co2_df <- read.csv("https://raw.githubusercontent.com/owid/co2-data/master/owid-co2-data.csv")
View(co2_df)
View(co2_df)
countries_2020 <- co2_df %>% filter(year == "2020")
top_5 <- top_n(countries_2020, 5, gas_co2_per_capita) %>%
select(country, gas_co2_per_capita) %>%
arrange(desc(gas_co2_per_capita))
# Create an interactive chart with widgets
server <- function(input, output) {
output$co2Plot <- renderPlotly({
co2_df <- co2_df %>% filter(country %in% input$user_category)
co2_df <- co2_df %>% filter(year>=input$year_slider[1])
co2_df <- co2_df %>% filter(year<=input$year_slider[2])
my_plot <- ggplot(data = co2_df) +
geom_line(mapping = aes(x = year,
y = gas_co2_per_capita,
color = country)) +
labs(title = "Annual Production-Based Emissions of C02 From Gas",
x = "Year",
y = "C02 Emissions from Gas (Tonnes per Person)",
color = "Countries")
my_plotly_plot <- ggplotly(my_plot)
return(my_plotly_plot)
})
output$top_5 <- renderTable({
top_5 <- top_n(countries_2020, 5, gas_co2_per_capita) %>%
select(country, gas_co2_per_capita) %>%
arrange(desc(gas_co2_per_capita))})
return(top_5)
}
library(ggplot2)
library(plotly)
library(scales)
library(dplyr)
library(tidyverse)
countries_2020 <- co2_df %>% filter(year == "2020")
top_5 <- top_n(countries_2020, 5, gas_co2_per_capita) %>%
select(country, gas_co2_per_capita) %>%
arrange(desc(gas_co2_per_capita))
# Create an interactive chart with widgets
server <- function(input, output) {
output$co2Plot <- renderPlotly({
co2_df <- co2_df %>% filter(country %in% input$user_category)
co2_df <- co2_df %>% filter(year>=input$year_slider[1])
co2_df <- co2_df %>% filter(year<=input$year_slider[2])
my_plot <- ggplot(data = co2_df) +
geom_line(mapping = aes(x = year,
y = gas_co2_per_capita,
color = country)) +
labs(title = "Annual Production-Based Emissions of C02 From Gas",
x = "Year",
y = "C02 Emissions from Gas (Tonnes per Person)",
color = "Countries")
my_plotly_plot <- ggplotly(my_plot)
return(my_plotly_plot)
})
output$top_5 <- renderTable({
top_5 <- top_n(countries_2020, 5, gas_co2_per_capita) %>%
select(country, gas_co2_per_capita) %>%
arrange(desc(gas_co2_per_capita))})
return(top_5)
}
View(top_5)
WorldCups$Attendance <- WorldCups$Attendance.gsub("\.","", WorldCups$Attendance)
WorldCups <- read.csv("WorldCups.csv")
setwd("C:/Users/ethan/Documents/info201/exploratory-analysis-sws0713")
